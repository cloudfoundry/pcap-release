// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pcap.proto

package pcap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// CaptureBosh starts capturing packets on bosh VMs. The capture can be
	// stopped by closing the client-side send channel. The Api MUST listen for
	// that close and MUST stop sending packets as soon as possible but SHOULD
	// send packets that it still receives from the agents.
	CaptureBosh(ctx context.Context, opts ...grpc.CallOption) (API_CaptureBoshClient, error)
	// CaptureCloudFoundry starts capturing packets on a cloud foundry app. The
	// capture can be stopped by closing the client-side send channel. The Api
	// MUST listen for that close and MUST stop sending packets as soon as
	// possible but SHOULD send packets that it still receives from the agents.
	CaptureCloudfoundry(ctx context.Context, opts ...grpc.CallOption) (API_CaptureCloudfoundryClient, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/pcap.API/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CaptureBosh(ctx context.Context, opts ...grpc.CallOption) (API_CaptureBoshClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], "/pcap.API/CaptureBosh", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPICaptureBoshClient{stream}
	return x, nil
}

type API_CaptureBoshClient interface {
	Send(*BoshRequest) error
	Recv() (*CaptureResponse, error)
	grpc.ClientStream
}

type aPICaptureBoshClient struct {
	grpc.ClientStream
}

func (x *aPICaptureBoshClient) Send(m *BoshRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPICaptureBoshClient) Recv() (*CaptureResponse, error) {
	m := new(CaptureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) CaptureCloudfoundry(ctx context.Context, opts ...grpc.CallOption) (API_CaptureCloudfoundryClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[1], "/pcap.API/CaptureCloudfoundry", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPICaptureCloudfoundryClient{stream}
	return x, nil
}

type API_CaptureCloudfoundryClient interface {
	Send(*CloudfoundryRequest) error
	Recv() (*CaptureResponse, error)
	grpc.ClientStream
}

type aPICaptureCloudfoundryClient struct {
	grpc.ClientStream
}

func (x *aPICaptureCloudfoundryClient) Send(m *CloudfoundryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPICaptureCloudfoundryClient) Recv() (*CaptureResponse, error) {
	m := new(CaptureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// CaptureBosh starts capturing packets on bosh VMs. The capture can be
	// stopped by closing the client-side send channel. The Api MUST listen for
	// that close and MUST stop sending packets as soon as possible but SHOULD
	// send packets that it still receives from the agents.
	CaptureBosh(API_CaptureBoshServer) error
	// CaptureCloudFoundry starts capturing packets on a cloud foundry app. The
	// capture can be stopped by closing the client-side send channel. The Api
	// MUST listen for that close and MUST stop sending packets as soon as
	// possible but SHOULD send packets that it still receives from the agents.
	CaptureCloudfoundry(API_CaptureCloudfoundryServer) error
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedAPIServer) CaptureBosh(API_CaptureBoshServer) error {
	return status.Errorf(codes.Unimplemented, "method CaptureBosh not implemented")
}
func (UnimplementedAPIServer) CaptureCloudfoundry(API_CaptureCloudfoundryServer) error {
	return status.Errorf(codes.Unimplemented, "method CaptureCloudfoundry not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pcap.API/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CaptureBosh_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).CaptureBosh(&aPICaptureBoshServer{stream})
}

type API_CaptureBoshServer interface {
	Send(*CaptureResponse) error
	Recv() (*BoshRequest, error)
	grpc.ServerStream
}

type aPICaptureBoshServer struct {
	grpc.ServerStream
}

func (x *aPICaptureBoshServer) Send(m *CaptureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPICaptureBoshServer) Recv() (*BoshRequest, error) {
	m := new(BoshRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_CaptureCloudfoundry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).CaptureCloudfoundry(&aPICaptureCloudfoundryServer{stream})
}

type API_CaptureCloudfoundryServer interface {
	Send(*CaptureResponse) error
	Recv() (*CloudfoundryRequest, error)
	grpc.ServerStream
}

type aPICaptureCloudfoundryServer struct {
	grpc.ServerStream
}

func (x *aPICaptureCloudfoundryServer) Send(m *CaptureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPICaptureCloudfoundryServer) Recv() (*CloudfoundryRequest, error) {
	m := new(CloudfoundryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pcap.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _API_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CaptureBosh",
			Handler:       _API_CaptureBosh_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CaptureCloudfoundry",
			Handler:       _API_CaptureCloudfoundry_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pcap.proto",
}

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	// Status returns the current status of the agent. It indicates whether the agent is ready to
	// accept new capture requests or is currently unavailable.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Capture is the main handler for the pcap agent. It contains the logic to open an interface
	// and start a packet capture. The resulting packets will be streamed back to the caller together
	// with messages informing the caller of any abnormal conditions that occur. The first message
	// sent must contain a payload of type StartAgentCapture, this will trigger the start of the capture.
	// The only messages that can be sent next is a StopAgentCapture which stops the capture gracefully
	// still sending any packets that are remaining and closing the stream afterwards.
	Capture(ctx context.Context, opts ...grpc.CallOption) (Agent_CaptureClient, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/pcap.Agent/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Capture(ctx context.Context, opts ...grpc.CallOption) (Agent_CaptureClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], "/pcap.Agent/Capture", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentCaptureClient{stream}
	return x, nil
}

type Agent_CaptureClient interface {
	Send(*AgentRequest) error
	Recv() (*CaptureResponse, error)
	grpc.ClientStream
}

type agentCaptureClient struct {
	grpc.ClientStream
}

func (x *agentCaptureClient) Send(m *AgentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentCaptureClient) Recv() (*CaptureResponse, error) {
	m := new(CaptureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	// Status returns the current status of the agent. It indicates whether the agent is ready to
	// accept new capture requests or is currently unavailable.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Capture is the main handler for the pcap agent. It contains the logic to open an interface
	// and start a packet capture. The resulting packets will be streamed back to the caller together
	// with messages informing the caller of any abnormal conditions that occur. The first message
	// sent must contain a payload of type StartAgentCapture, this will trigger the start of the capture.
	// The only messages that can be sent next is a StopAgentCapture which stops the capture gracefully
	// still sending any packets that are remaining and closing the stream afterwards.
	Capture(Agent_CaptureServer) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedAgentServer) Capture(Agent_CaptureServer) error {
	return status.Errorf(codes.Unimplemented, "method Capture not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pcap.Agent/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Capture_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).Capture(&agentCaptureServer{stream})
}

type Agent_CaptureServer interface {
	Send(*CaptureResponse) error
	Recv() (*AgentRequest, error)
	grpc.ServerStream
}

type agentCaptureServer struct {
	grpc.ServerStream
}

func (x *agentCaptureServer) Send(m *CaptureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentCaptureServer) Recv() (*AgentRequest, error) {
	m := new(AgentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pcap.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Agent_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Capture",
			Handler:       _Agent_Capture_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pcap.proto",
}

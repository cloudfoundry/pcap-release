// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: pcap.proto

package pcap

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MessageType represents the underlying issue for easy assertion of the
// situation. It should be used by the client to provide a nice message to the
// end user. Future values will be added to extend functionalities of the API.
type MessageType int32

const (
	// One of the requested instances does not exist but there is at least one
	// instance to capture from. MUST be sent as soon as possible.
	MessageType_UNKNOWN MessageType = 0
	// One instance failed during capturing but there are still instances left to
	// capture from. The detailed message should contain information about the
	// stopped party.
	MessageType_INSTANCE_UNAVAILABLE MessageType = 1
	// Starting the capture request has failed because the request could not be
	// fulfilled (e.g. no matching instances, pcap feature not enabled).
	MessageType_START_CAPTURE_FAILED MessageType = 2
	// The request could not be fulfilled, e.g. because the app or BOSH deployment
	// with the requested name do not exist.
	MessageType_INVALID_REQUEST MessageType = 3
	// Some participant on the path is congested to the point of discarding data.
	// The detailed message should contain the congested party.
	MessageType_CONGESTED MessageType = 4
	// Some limit has been reached, e.g. number of concurrent requests, time,
	// bytes, etc.; Message details identifies, which limit has been reached.
	MessageType_LIMIT_REACHED MessageType = 5
	// A single agent or the overall capture has stopped gracefully.
	// The detailed message should contain information about the stopped party.
	MessageType_CAPTURE_STOPPED MessageType = 6
	// An error happened while attempting communication with PCAP components,
	// independent of the client.
	MessageType_CONNECTION_ERROR MessageType = 7
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "UNKNOWN",
		1: "INSTANCE_UNAVAILABLE",
		2: "START_CAPTURE_FAILED",
		3: "INVALID_REQUEST",
		4: "CONGESTED",
		5: "LIMIT_REACHED",
		6: "CAPTURE_STOPPED",
		7: "CONNECTION_ERROR",
	}
	MessageType_value = map[string]int32{
		"UNKNOWN":              0,
		"INSTANCE_UNAVAILABLE": 1,
		"START_CAPTURE_FAILED": 2,
		"INVALID_REQUEST":      3,
		"CONGESTED":            4,
		"LIMIT_REACHED":        5,
		"CAPTURE_STOPPED":      6,
		"CONNECTION_ERROR":     7,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pcap_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_pcap_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{0}
}

type CaptureOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device  string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Filter  string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	SnapLen uint32 `protobuf:"varint,3,opt,name=snapLen,proto3" json:"snapLen,omitempty"`
}

func (x *CaptureOptions) Reset() {
	*x = CaptureOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureOptions) ProtoMessage() {}

func (x *CaptureOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureOptions.ProtoReflect.Descriptor instead.
func (*CaptureOptions) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{0}
}

func (x *CaptureOptions) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *CaptureOptions) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *CaptureOptions) GetSnapLen() uint32 {
	if x != nil {
		return x.SnapLen
	}
	return 0
}

// CaptureResponse contains either a pcap packet or a message to inform the
// client of some condition that appeared.
type CaptureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*CaptureResponse_Packet
	//	*CaptureResponse_Message
	Payload isCaptureResponse_Payload `protobuf_oneof:"payload"`
}

func (x *CaptureResponse) Reset() {
	*x = CaptureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureResponse) ProtoMessage() {}

func (x *CaptureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureResponse.ProtoReflect.Descriptor instead.
func (*CaptureResponse) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{1}
}

func (m *CaptureResponse) GetPayload() isCaptureResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CaptureResponse) GetPacket() *Packet {
	if x, ok := x.GetPayload().(*CaptureResponse_Packet); ok {
		return x.Packet
	}
	return nil
}

func (x *CaptureResponse) GetMessage() *Message {
	if x, ok := x.GetPayload().(*CaptureResponse_Message); ok {
		return x.Message
	}
	return nil
}

type isCaptureResponse_Payload interface {
	isCaptureResponse_Payload()
}

type CaptureResponse_Packet struct {
	Packet *Packet `protobuf:"bytes,1,opt,name=packet,proto3,oneof"`
}

type CaptureResponse_Message struct {
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3,oneof"`
}

func (*CaptureResponse_Packet) isCaptureResponse_Payload() {}

func (*CaptureResponse_Message) isCaptureResponse_Payload() {}

// Packet wraps the raw pcap data stream of one packet. More fields might be
// added as needed.
type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{2}
}

func (x *Packet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Message represents a control message used by the server to inform the client
// of something it encountered. The type specifies kind of message it is and the
// message contains a human readable version with more details that should be
// shown to the end-user. These messages MUST NOT represent error conditions in
// which the connection can not be continued, those must be represented using
// the proper error/status messages.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=pcap.MessageType" json:"type,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Origin  string      `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{3}
}

func (x *Message) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_UNKNOWN
}

func (x *Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Message) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Healthy            bool   `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	CompatibilityLevel int64  `protobuf:"varint,2,opt,name=compatibilityLevel,proto3" json:"compatibilityLevel,omitempty"`
	Message            string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Bosh               *bool  `protobuf:"varint,4,opt,name=bosh,proto3,oneof" json:"bosh,omitempty"`
	Cf                 *bool  `protobuf:"varint,5,opt,name=cf,proto3,oneof" json:"cf,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{4}
}

func (x *StatusResponse) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *StatusResponse) GetCompatibilityLevel() int64 {
	if x != nil {
		return x.CompatibilityLevel
	}
	return 0
}

func (x *StatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatusResponse) GetBosh() bool {
	if x != nil && x.Bosh != nil {
		return *x.Bosh
	}
	return false
}

func (x *StatusResponse) GetCf() bool {
	if x != nil && x.Cf != nil {
		return *x.Cf
	}
	return false
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{5}
}

type CaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operation:
	//
	//	*CaptureRequest_Start
	//	*CaptureRequest_Stop
	Operation isCaptureRequest_Operation `protobuf_oneof:"operation"`
}

func (x *CaptureRequest) Reset() {
	*x = CaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureRequest) ProtoMessage() {}

func (x *CaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureRequest.ProtoReflect.Descriptor instead.
func (*CaptureRequest) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{6}
}

func (m *CaptureRequest) GetOperation() isCaptureRequest_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *CaptureRequest) GetStart() *StartCapture {
	if x, ok := x.GetOperation().(*CaptureRequest_Start); ok {
		return x.Start
	}
	return nil
}

func (x *CaptureRequest) GetStop() *StopCapture {
	if x, ok := x.GetOperation().(*CaptureRequest_Stop); ok {
		return x.Stop
	}
	return nil
}

type isCaptureRequest_Operation interface {
	isCaptureRequest_Operation()
}

type CaptureRequest_Start struct {
	Start *StartCapture `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type CaptureRequest_Stop struct {
	Stop *StopCapture `protobuf:"bytes,2,opt,name=stop,proto3,oneof"`
}

func (*CaptureRequest_Start) isCaptureRequest_Operation() {}

func (*CaptureRequest_Stop) isCaptureRequest_Operation() {}

type StopCapture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopCapture) Reset() {
	*x = StopCapture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCapture) ProtoMessage() {}

func (x *StopCapture) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCapture.ProtoReflect.Descriptor instead.
func (*StopCapture) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{7}
}

type EndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Capture:
	//
	//	*Capture_Bosh
	//	*Capture_Cf
	Capture isCapture_Capture `protobuf_oneof:"capture"`
}

func (x *EndpointRequest) Reset() {
	*x = EndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointRequest) ProtoMessage() {}

func (x *EndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointRequest.ProtoReflect.Descriptor instead.
func (*EndpointRequest) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{8}
}

func (m *EndpointRequest) GetCapture() isCapture_Capture {
	if m != nil {
		return m.Capture
	}
	return nil
}

func (x *EndpointRequest) GetBosh() *BoshQuery {
	if x, ok := x.GetCapture().(*Capture_Bosh); ok {
		return x.Bosh
	}
	return nil
}

func (x *EndpointRequest) GetCf() *CloudfoundryQuery {
	if x, ok := x.GetCapture().(*Capture_Cf); ok {
		return x.Cf
	}
	return nil
}

type isCapture_Capture interface {
	isCapture_Capture()
}

type Capture_Bosh struct {
	Bosh *BoshQuery `protobuf:"bytes,1,opt,name=bosh,proto3,oneof"`
}

type Capture_Cf struct {
	Cf *CloudfoundryQuery `protobuf:"bytes,2,opt,name=cf,proto3,oneof"`
}

func (*Capture_Bosh) isCapture_Capture() {}

func (*Capture_Cf) isCapture_Capture() {}

type StartCapture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capture *EndpointRequest `protobuf:"bytes,1,opt,name=capture,proto3" json:"capture,omitempty"`
	Options *CaptureOptions  `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *StartCapture) Reset() {
	*x = StartCapture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCapture) ProtoMessage() {}

func (x *StartCapture) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCapture.ProtoReflect.Descriptor instead.
func (*StartCapture) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{9}
}

func (x *StartCapture) GetCapture() *EndpointRequest {
	if x != nil {
		return x.Capture
	}
	return nil
}

func (x *StartCapture) GetOptions() *CaptureOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type BoshQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Deployment string   `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Groups     []string `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	Instances  []string `protobuf:"bytes,4,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *BoshQuery) Reset() {
	*x = BoshQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoshQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoshQuery) ProtoMessage() {}

func (x *BoshQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoshQuery.ProtoReflect.Descriptor instead.
func (*BoshQuery) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{10}
}

func (x *BoshQuery) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *BoshQuery) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *BoshQuery) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *BoshQuery) GetInstances() []string {
	if x != nil {
		return x.Instances
	}
	return nil
}

type CloudfoundryQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	AppId   string  `protobuf:"bytes,2,opt,name=appId,proto3" json:"appId,omitempty"`
	AppType *string `protobuf:"bytes,3,opt,name=appType,proto3,oneof" json:"appType,omitempty"`
	Indices []int32 `protobuf:"varint,4,rep,packed,name=indices,proto3" json:"indices,omitempty"`
}

func (x *CloudfoundryQuery) Reset() {
	*x = CloudfoundryQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudfoundryQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudfoundryQuery) ProtoMessage() {}

func (x *CloudfoundryQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudfoundryQuery.ProtoReflect.Descriptor instead.
func (*CloudfoundryQuery) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{11}
}

func (x *CloudfoundryQuery) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CloudfoundryQuery) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CloudfoundryQuery) GetAppType() string {
	if x != nil && x.AppType != nil {
		return *x.AppType
	}
	return ""
}

func (x *CloudfoundryQuery) GetIndices() []int32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

// AgentRequest contains either the start or stop request.
type AgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// payload wraps the start and stop requests.
	//
	// Types that are assignable to Payload:
	//
	//	*AgentRequest_Start
	//	*AgentRequest_Stop
	Payload isAgentRequest_Payload `protobuf_oneof:"payload"`
}

func (x *AgentRequest) Reset() {
	*x = AgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentRequest) ProtoMessage() {}

func (x *AgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentRequest.ProtoReflect.Descriptor instead.
func (*AgentRequest) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{12}
}

func (m *AgentRequest) GetPayload() isAgentRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AgentRequest) GetStart() *StartAgentCapture {
	if x, ok := x.GetPayload().(*AgentRequest_Start); ok {
		return x.Start
	}
	return nil
}

func (x *AgentRequest) GetStop() *StopAgentCapture {
	if x, ok := x.GetPayload().(*AgentRequest_Stop); ok {
		return x.Stop
	}
	return nil
}

type isAgentRequest_Payload interface {
	isAgentRequest_Payload()
}

type AgentRequest_Start struct {
	Start *StartAgentCapture `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type AgentRequest_Stop struct {
	Stop *StopAgentCapture `protobuf:"bytes,2,opt,name=stop,proto3,oneof"`
}

func (*AgentRequest_Start) isAgentRequest_Payload() {}

func (*AgentRequest_Stop) isAgentRequest_Payload() {}

// StartAgentCapture holds all parameters needed to start a capture.
type StartAgentCapture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capture *CaptureOptions `protobuf:"bytes,1,opt,name=capture,proto3" json:"capture,omitempty"`
}

func (x *StartAgentCapture) Reset() {
	*x = StartAgentCapture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartAgentCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAgentCapture) ProtoMessage() {}

func (x *StartAgentCapture) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAgentCapture.ProtoReflect.Descriptor instead.
func (*StartAgentCapture) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{13}
}

func (x *StartAgentCapture) GetCapture() *CaptureOptions {
	if x != nil {
		return x.Capture
	}
	return nil
}

// StopAgentCapture signals the agent to stop the current capture.
type StopAgentCapture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopAgentCapture) Reset() {
	*x = StopAgentCapture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pcap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopAgentCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAgentCapture) ProtoMessage() {}

func (x *StopAgentCapture) ProtoReflect() protoreflect.Message {
	mi := &file_pcap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAgentCapture.ProtoReflect.Descriptor instead.
func (*StopAgentCapture) Descriptor() ([]byte, []int) {
	return file_pcap_proto_rawDescGZIP(), []int{14}
}

var File_pcap_proto protoreflect.FileDescriptor

var file_pcap_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x70, 0x63,
	0x61, 0x70, 0x22, 0x5a, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x61, 0x70, 0x4c, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6e, 0x61, 0x70, 0x4c, 0x65, 0x6e, 0x22, 0x6f,
	0x0a, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x63, 0x61,
	0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x1c, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6f, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x73, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x13, 0x0a, 0x02, 0x63, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x02, 0x63, 0x66, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x73, 0x68, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x63, 0x66, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x0b,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0d, 0x0a, 0x0b, 0x53,
	0x74, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x22, 0x6a, 0x0a, 0x07, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x6f, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x42, 0x6f, 0x73, 0x68, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x73, 0x68, 0x12, 0x2b,
	0x0a, 0x02, 0x63, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x63, 0x61,
	0x70, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x79, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x02, 0x63, 0x66, 0x42, 0x09, 0x0a, 0x07, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x22, 0x67, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x2e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x79, 0x0a, 0x0b, 0x42, 0x6f, 0x73, 0x68, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x79, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x43, 0x0a,
	0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x2a, 0xb0, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x32, 0x76, 0x0a, 0x03, 0x41, 0x50, 0x49,
	0x12, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x63, 0x61,
	0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x14, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x32, 0x76, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x63, 0x61, 0x70,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x63, 0x61,
	0x70, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x70, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x72, 0x79, 0x2f, 0x70, 0x63, 0x61, 0x70, 0x2d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x63, 0x61, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pcap_proto_rawDescOnce sync.Once
	file_pcap_proto_rawDescData = file_pcap_proto_rawDesc
)

func file_pcap_proto_rawDescGZIP() []byte {
	file_pcap_proto_rawDescOnce.Do(func() {
		file_pcap_proto_rawDescData = protoimpl.X.CompressGZIP(file_pcap_proto_rawDescData)
	})
	return file_pcap_proto_rawDescData
}

var file_pcap_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pcap_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_pcap_proto_goTypes = []interface{}{
	(MessageType)(0),          // 0: pcap.MessageType
	(*CaptureOptions)(nil),    // 1: pcap.CaptureOptions
	(*CaptureResponse)(nil),   // 2: pcap.CaptureResponse
	(*Packet)(nil),            // 3: pcap.Packet
	(*Message)(nil),           // 4: pcap.Message
	(*StatusResponse)(nil),    // 5: pcap.StatusResponse
	(*StatusRequest)(nil),     // 6: pcap.StatusRequest
	(*CaptureRequest)(nil),    // 7: pcap.CaptureRequest
	(*StopCapture)(nil),       // 8: pcap.StopCapture
	(*EndpointRequest)(nil),   // 9: pcap.EndpointRequest
	(*StartCapture)(nil),      // 10: pcap.StartCapture
	(*BoshQuery)(nil),         // 11: pcap.BoshQuery
	(*CloudfoundryQuery)(nil), // 12: pcap.CloudfoundryQuery
	(*AgentRequest)(nil),      // 13: pcap.AgentRequest
	(*StartAgentCapture)(nil), // 14: pcap.StartAgentCapture
	(*StopAgentCapture)(nil),  // 15: pcap.StopAgentCapture
}
var file_pcap_proto_depIdxs = []int32{
	3,  // 0: pcap.CaptureResponse.packet:type_name -> pcap.Packet
	4,  // 1: pcap.CaptureResponse.message:type_name -> pcap.Message
	0,  // 2: pcap.Message.type:type_name -> pcap.MessageType
	10, // 3: pcap.CaptureRequest.start:type_name -> pcap.StartCapture
	8,  // 4: pcap.CaptureRequest.stop:type_name -> pcap.StopCapture
	11, // 5: pcap.EndpointRequest.bosh:type_name -> pcap.BoshQuery
	12, // 6: pcap.EndpointRequest.cf:type_name -> pcap.CloudfoundryQuery
	9,  // 7: pcap.StartCapture.capture:type_name -> pcap.EndpointRequest
	1,  // 8: pcap.StartCapture.options:type_name -> pcap.CaptureOptions
	14, // 9: pcap.AgentRequest.start:type_name -> pcap.StartAgentCapture
	15, // 10: pcap.AgentRequest.stop:type_name -> pcap.StopAgentCapture
	1,  // 11: pcap.StartAgentCapture.capture:type_name -> pcap.CaptureOptions
	6,  // 12: pcap.API.Status:input_type -> pcap.StatusRequest
	7,  // 13: pcap.API.EndpointRequest:input_type -> pcap.CaptureRequest
	6,  // 14: pcap.Agent.Status:input_type -> pcap.StatusRequest
	13, // 15: pcap.Agent.EndpointRequest:input_type -> pcap.AgentRequest
	5,  // 16: pcap.API.Status:output_type -> pcap.StatusResponse
	2,  // 17: pcap.API.EndpointRequest:output_type -> pcap.CaptureResponse
	5,  // 18: pcap.Agent.Status:output_type -> pcap.StatusResponse
	2,  // 19: pcap.Agent.EndpointRequest:output_type -> pcap.CaptureResponse
	16, // [16:20] is the sub-list for method output_type
	12, // [12:16] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pcap_proto_init() }
func file_pcap_proto_init() {
	if File_pcap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pcap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCapture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartCapture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoshQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudfoundryQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartAgentCapture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pcap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopAgentCapture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pcap_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CaptureResponse_Packet)(nil),
		(*CaptureResponse_Message)(nil),
	}
	file_pcap_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_pcap_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*CaptureRequest_Start)(nil),
		(*CaptureRequest_Stop)(nil),
	}
	file_pcap_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Capture_Bosh)(nil),
		(*Capture_Cf)(nil),
	}
	file_pcap_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_pcap_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*AgentRequest_Start)(nil),
		(*AgentRequest_Stop)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pcap_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pcap_proto_goTypes,
		DependencyIndexes: file_pcap_proto_depIdxs,
		EnumInfos:         file_pcap_proto_enumTypes,
		MessageInfos:      file_pcap_proto_msgTypes,
	}.Build()
	File_pcap_proto = out.File
	file_pcap_proto_rawDesc = nil
	file_pcap_proto_goTypes = nil
	file_pcap_proto_depIdxs = nil
}
